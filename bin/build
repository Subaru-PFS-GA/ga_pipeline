#!/usr/bin/env python

# This script generates the necessary config files to install the package
# using setuptools, pip and conda.
# For testing pip installation, create a user conda environment and activate it
# with the commands:
# $ CONDA_PKGS_DIRS=~/temp/pkgs conda create --prefix ~/envs/setuptest python=3
# $ conda activate ~/envs/setuptest

# ### Package constants

MODULE_NAME = 'pfsgapipe'
MODULE_PATH = '.'
MODULE_URL = 'https://github.com/Subaru-PFS-GA/ga_pipeline'
MODULE_NAMESPACE = 'pfs/ga/pipeline'
MODULE_SOURCE_FOLDER = './python'
MODULE_ENTRYPOINT_PREFIX = 'pfsgapipe'
MODULE_DEPENDENCIES = [
    ['python', '>=3.10'],
    ['tqdm', '>=4'],
    ['numpy', '>=1.24'],
    ['pandas', '>=1.5'],
    ['h5py', '>=3.8'],
    ['matplotlib', '>=3.7'],
    ['scipy', '>=1.10'],
    ['pyyaml', '>=6.0']
]

# Directory to install additional conda packages required for conda-build
CONDA_PACKAGE_FOLDER = './build/pkgs'
# Directory for conda-build recipes, relative to the module
CONDA_RECIPE_FOLDER = './recipe'
# Directory for scons build files
UPS_FOLDER = './ups'
# Output directory for conda-build
BUILD_OUTPUT_FOLDER = './build/modules'
# Location of the assets folder
BUILD_ASSETS_FOLDER = './assets/build'

MODULES = {
    'pfsgapipe': {
        'description': 'Subaru PFS GA pipeline',
        'dependencies': MODULE_DEPENDENCIES,
    },
}

# ### End packaga constants

import os
import re
import glob
import shutil
import subprocess
import argparse
import logging
from collections.abc import Iterable

PARSER_COMMAND = 'command'

COMMAND_DISCOVER = 'discover'
COMMAND_CONFIGURE = 'configure'
COMMAND_CLEAN = 'clean'
COMMAND_PYTHON_BUILD = 'python-build'
COMMAND_CONDA_BUILD = 'conda-build'
COMMAND_SCONS_BUILD = 'scons'
COMMAND_EUPS_CREATE = 'eups-create'
COMMAND_PYTHON_INSTALL = 'python-install'
COMMAND_PIP_INSTALL = 'pip-install'
COMMAND_CONDA_INSTALL = 'conda-install'

ARG_NEXT_VERSION = '--next-version'
ARG_BUILD_NUMBER = '--build-number'
ARG_MODULE = '--module'
ARG_PACKAGE_FOLDER = '--package-folder'
ARG_OUTPUT_FOLDER = '--output-folder'

ENV_CONDA_PKGS_DIRS = 'CONDA_PKGS_DIRS'

dirstack = []

def handle_exception(ex, continue_on_error=False):
    """
    Handle runtime exceptions. If continue_on_error is True, log the exception
    and continue execution. Otherwise, log the exception and exit the script by
    rethrowing the exception.
    """

    logging.error(ex)
    if not continue_on_error:
        raise ex

def create_parser():
    """
    Register command-line arguments for the script.

    The commands are:
    - discover: discover and print package information.
    - configure: generate the setup configuration files for the package.
    - clean: remove all files generated by the build process.
    - conda-build: build the conda package using conda
    """

    parser = argparse.ArgumentParser()

    sps = parser.add_subparsers(dest=PARSER_COMMAND, required=True)
    pp = []

    p = sps.add_parser(COMMAND_DISCOVER)
    pp.append(p)

    p = sps.add_parser(COMMAND_CONFIGURE)
    pp.append(p)

    p = sps.add_parser(COMMAND_CLEAN)
    pp.append(p)
    p.add_argument(ARG_PACKAGE_FOLDER, type=str, help='Override package folder.')
    p.add_argument(ARG_OUTPUT_FOLDER, type=str, help='Override output folder.')

    p = sps.add_parser(COMMAND_PYTHON_BUILD)
    pp.append(p)

    p = sps.add_parser(COMMAND_CONDA_BUILD)
    pp.append(p)
    p.add_argument(ARG_PACKAGE_FOLDER, type=str, help='Override package folder.')
    p.add_argument(ARG_OUTPUT_FOLDER, type=str, help='Override output folder.')

    # Arguments common to all modes
    for p in pp:
        p.add_argument(ARG_MODULE, type=str, nargs='*', help='Optional list of modules, default is all.')
        p.add_argument(ARG_NEXT_VERSION, type=str, help='Override next version.')
        p.add_argument(ARG_BUILD_NUMBER, type=int, help='Override build number.')

    return parser

def get_default(default=None):
    """
    Return the first non-None value from a list of values.
    """

    if isinstance(default, str):
        return default
    elif isinstance(default, Iterable):
        for d in default:
            if d is not None:
                return d
        return None
    else:
        return default
    
def arg_name_to_key(name):
    """
    Convert a command-line argument name to a dictionary key.
    """

    return name.replace('-', '_').strip('_')

def is_arg(args, name):
    """
    Return True if the argument is present in the dictionary and is not None.
    """

    key = arg_name_to_key(name)
    return key in args and args[key] is not None

def get_arg(args, name, default=None):
    """
    Return the value of the argument if it is present in the dictionary and is not None.
    If the argument is not present, return the default value.
    """

    key = arg_name_to_key(name)
    return args[key] if key in args and args[key] is not None else get_default(default)

def is_env(key):
    """
    Return True if the environment variable is present.
    """

    return key in os.environ

def get_env(key, default=None):
    """
    Return the value of the environment variable if it is present and is not None.
    If the environment variable is not present, return the default value.
    """

    return os.environ[key] if key in os.environ and os.environ[key] is not None else get_default(default)

def set_env(key, value):
    """
    Set the value of an environment variable.
    """

    os.environ[key] = value

def shell(command):
    """
    Execute a shell command synchronously and return the output.
    """

    logging.info('Executing shell command `{}`'.format(command))
    with os.popen(command) as p:
        return p.read()

def run(command, env=None):
    """
    Execute a program asynchronously.
    """

    logging.info('Running command `{}`'.format(command))
    subprocess.run(command.split(' '), env=env)

def git_create_tag(tag, message):
    """
    Create a new git tag at the current HEAD of the repo
    """
    shell(f"git tag -a {tag} -m '{message}'")
    

def git_get_current_tag():
    """
    Return the most recent git tag.
    """

    # Tag name is assumed to be vX.X.X
    tag = shell("git describe --abbrev=0 --tags --match 'v*.*.*'").strip()
    
    if tag == '':
        raise RuntimeError('No git tags found.')
    
    return tag

def git_get_commits_since(*version):
    """
    Return the number of commits since the last tag.
    """

    tag = format_tag(*version)
    return int(shell(f"git rev-list {tag}..HEAD --count").strip())

def git_is_dirty():
    """
    Return True if the git repository is dirty, i.e. has uncommitted changes
    to tracked files.
    """

    # NOTE: git status will force stripping notebook outputs so it's not a dry operation

    res = shell("git status --porcelain --untracked-files=no")
    return res != ''

def split_version(tag):
    """
    Split a tag name into a tuple of integers.
    """

    # Tag name is assumed to be vX.X.X, only return X.X.X as a tuple of numbers
    return tuple(int(p) for p in tag[1:].split('.'))

def format_tag(*version):
    """
    Format a tuple of integers as a tag name.
    """

    return 'v' + format_version(*version)

def format_version(*version):
    """
    Format a tuple of integers as a version string.
    """

    return '.'.join([ str(i) for i in version ])

def cp(input_file, output_file):
    """
    Copy a file.
    """

    dir = os.path.dirname(output_file)
    if not os.path.isdir(dir):
        mkdir(dir)

    shutil.copy2(input_file, output_file)

def mkdir(dir):
    """
    Create a directory.
    """

    if not os.path.isdir(dir):
        os.makedirs(dir, exist_ok=True)
        logging.info("Created directory `{}`".format(dir))
    else:
        logging.info("Directory `{}` already exists".format(dir))

def chdir(dir, continue_on_error=False):
    """
    Change the current working directory.
    """

    try:
        dir = os.path.abspath(dir)
        cwd = os.getcwd()
        os.chdir(dir)
        dirstack.append(cwd)
        logging.info(f"Changed working directory to `{dir}`")
    except:
        msg = f"Failed to change working directory to `{dir}`."
        if continue_on_error:
            logging.error(msg)
        else:
            raise RuntimeError(msg)
        
def popdir(continue_on_error=False):
    """
    Restore the previous working directory.
    """

    try:
        cwd = dirstack.pop()
        os.chdir(cwd)
        logging.info(f"Changed working directory to `{cwd}`")
    except:
        msg = f"Failed to change working directory."
        if continue_on_error:
            logging.error(msg)
        else:
            raise RuntimeError(msg)

def rmdir(dir, continue_on_error=True):
    """
    Delete a directory recursively.
    """

    try:
        dir = os.path.abspath(dir)
        shutil.rmtree(dir)
        logging.info(f"Removed directory `{dir}`")
    except:
        msg = f"Failed to remove directory `{dir}`."
        if continue_on_error:
            logging.error(msg)
        else:
            raise RuntimeError(msg)

def sed(patterns, input_file, output_file):
    """
    Replace patterns in a file and write the result to another file.
    """

    with open(input_file) as f:
        lines = f.read()

    for (p, r) in patterns:
        lines = lines.replace(p, r)

    dir = os.path.dirname(output_file)
    if not os.path.isdir(dir):
        mkdir(dir)

    with open(output_file, 'w') as f:
        f.write(lines)

def format_excludes_cfg(excl):
    """
    Format a list of excluded packages as in a setup.cfg file.
    """

    cfg = ''
    for e in excl:
        cfg += '    {}\n'.format(e)
    return cfg

def format_dependencies(dep, indent=''):
    """
    Format a list of dependencies as in a setup.cfg file.
    """

    cfg = ''
    for d in dep:
        cfg += '{}{}'.format(indent, d[0])
        cfg += ' ' + ','.join(d[1:])
        cfg += '\n'
    return cfg

def format_includes_manifest_in(includes):
    """
    Format a list of included files as in a MANIFEST.in file.    
    """

    return ''.join(f'include {i}\n' for i in includes)

def format_console_scripts_yaml(console_scripts):
    """
    Format a list of console scripts as in a yaml file.
    """

    cmd = ''
    for s in console_scripts:
        cmd += '        - {}\n'.format(s)
    return cmd

def format_console_scripts_cfg(console_scripts):
    """
    Format a list of console scripts as in a setup.cfg file.
    """

    cmd = ''
    for s in console_scripts:
        cmd += '    {}\n'.format(s)
    return cmd

class PackageBuilder():
    """
    Implements a package builder task.

    Variables:
    ----------
    name: str
        The name of the package
    path: str
        The root folder of the package (git repo root)
    url: str
        The URL of the package (github link)
    namespace: str
        The Python namespace of the package, separated by slashes!
    assets_folder: str
        The assets folder for setup template files
    package_folder: str
        Conda package folder
    output_folder: str
        The output folder for the build
    source_folder: str
        The Python source folder of the package, relative to `path`
    command_prefix: str
        The command prefix for console scripts
    dependencies: list
        The list of dependencies for the package
    description: str
        The description of the package
    """

    def __init__(self, *,
                 name=None,
                 path=None,
                 url=None,
                 namespace=None,
                 assets_folder=None,
                 package_folder=None,
                 output_folder=None,
                 source_folder=None,
                 command_prefix=None,
                 dependencies=None,
                 description=None):
        
        self.name = name
        self.path = path
        self.url = url
        self.namespace = namespace
        self.assets_folder = assets_folder
        self.package_folder = package_folder
        self.output_folder = output_folder
        self.source_folder = source_folder
        self.command_prefix = command_prefix
        self.dependencies = dependencies
        self.description = description

    def get_versions(self, args, unknown_args):
        """
        Return the most recent git tag and the next version number based on the number
        of commits since the last tag which will be the build number.
        """

        chdir(self.path)

        tag = git_get_current_tag()
        version = split_version(tag)
        build = git_get_commits_since(*version[:2], 0)
        
        if git_is_dirty():
            build += 1
            logging.info(f'Git repo is dirty, bumping build number by one to {build}.')

        # Override from args
        build = get_arg(args, ARG_BUILD_NUMBER, build)

        # Override from args
        if is_arg(args, ARG_NEXT_VERSION):
            next_version = split_version(get_arg(args, ARG_NEXT_VERSION))
        else:
            next_version = version[:2] + (build,)
        
        logging.info(f'Current version: {tag} (from last git tag)')
        logging.info(f'Next version: {format_tag(*next_version)}')
        logging.info(f'Build number: {build}')

        popdir()

        return tag, next_version, build

    def get_excludes(self):
        """
        Generate a list of excludes. This will be used in [options.packages.find]
        
        These include namespace directories (where we want to avoid getting any __init__.py
        files getting into the final packages), as well as unit tests.
        """

        excl = [ 'test*' ]

        # Generate a list of excluded packages (namespace directories)
        parts = MODULE_NAMESPACE.split('/')[:-1]
        for i in range(len(parts)):
            excl.append('/'.join(parts[:i + 1]))

        return excl

    def find_notebooks(self):
        """
        Return the list of all Jupyter notebooks in the package.
        """

        nbs = []
        for fn in glob.glob(os.path.join(self.source_folder, self.namespace, '**/*.ipynb')):
            nbs.append(os.path.relpath(fn, '.'))

        return nbs

    def find_entrypoints(self):
        """
        Find all command-line entrypoints in the package.
        """

        entrypoints = []
        for fn in glob.glob(os.path.join(self.path, self.source_folder, self.namespace, 'scripts/*.py')):
            with open(fn, encoding="utf-8") as f:
                if f.readline().startswith("#!/usr/bin/env python3"):
                    cls = os.path.splitext(os.path.split(fn)[1])[0]
                    cmd = cls.replace('_', '')
                    prefix = self.command_prefix
                    if prefix is not None and prefix != '':
                        prefix += '-'
                    namespace = self.namespace.replace('/', '.')
                    entrypoints.append(f'{prefix}{cmd} = {namespace}.scripts.{cls}:main')

                    logging.info('Found entrypoint `{}`.'.format(cls))

        if len(entrypoints) == 0:
            logging.info('No command-line entrypoints founds.')

        return entrypoints

    def generate_config(self, version, build):
        """
        Generate the setup configuration files for the package.
        """

        src = os.path.relpath(self.source_folder, self.path)
        excl = self.get_excludes()
        nbs = self.find_notebooks()
        cmd = self.find_entrypoints()

        logging.info('Generating setup configuration files.')

        patterns = (
            ('%%package_name%%', self.name),
            ('%%package_url%%', self.url),
            ('%%package_description%%', self.description),
            ('%%version%%', format_version(*version)),
            ('%%version_file%%', os.path.join(src, self.namespace, '_version.py')),
            ('%%build%%', str(build)),
            ('%%package_dir_cfg%%', f'{src}'),
            ('%%excludes_cfg%%', format_excludes_cfg(excl)),
            ('%%data_files%%', format_includes_manifest_in(nbs)),
            ('%%requirements_txt%%', format_dependencies(self.dependencies)),
            ('%%requirements_yaml%%', format_dependencies(self.dependencies, indent='        - ')),
            ('%%requirements_cfg%%', format_dependencies(self.dependencies, indent='    ')),
            ('%%console_scripts_yaml%%', format_console_scripts_yaml(cmd)),
            ('%%console_scripts_cfg%%', format_console_scripts_cfg(cmd)),
        )
        
        fin = os.path.join(self.assets_folder, '_version.py')
        fout = os.path.join(self.source_folder, self.namespace, '_version.py')
        sed(patterns, fin, fout)
        logging.info(f'Generated {fout}')

        fin = os.path.join(self.assets_folder, '_meta.yaml')
        fout = os.path.join(self.path, CONDA_RECIPE_FOLDER, 'meta.yaml')
        sed(patterns, fin, fout)
        logging.info(f'Generated {fout}')

        fin = os.path.join(self.assets_folder, '_conda_build_config.yaml')
        fout = os.path.join(self.path, CONDA_RECIPE_FOLDER, 'conda_build_config.yaml')
        cp(fin, fout)
        logging.info(f'Copied {fout}')

        fin = os.path.join(self.assets_folder, '_setup.cfg')
        fout = os.path.join(self.path, 'setup.cfg')
        sed(patterns, fin, fout)
        logging.info(f'Generated {fout}')

        fin = os.path.join(self.assets_folder, '_setup.py')
        fout = os.path.join(self.path, 'setup.py')
        sed(patterns, fin, fout)
        logging.info(f'Generated {fout}')

        fin = os.path.join(self.assets_folder, '_requirements.txt')
        fout = os.path.join(self.path, 'requirements.txt')
        sed(patterns, fin, fout)
        logging.info(f'Copied {fout}')

        fin = os.path.join(self.assets_folder, '_MANIFEST.in')
        fout = os.path.join(self.path, 'MANIFEST.in')
        sed(patterns, fin, fout)
        logging.info(f'Generated {fout}')

        # EUPS

        fin = os.path.join(self.assets_folder, '_SConstruct')
        fout = os.path.join(self.path, 'SConstruct')
        sed(patterns, fin, fout)
        logging.info(f'Generated {fout}')

        fin = os.path.join(self.assets_folder, '_eupspkg.cfg.sh')
        fout = os.path.join(self.path, UPS_FOLDER, 'eupspkg.cfg.sh')
        cp(fin, fout)
        logging.info(f'Copied {fout}')

        # TODO: this file might need to be generated
        fin = os.path.join(self.assets_folder, '_scons.table')
        fout = os.path.join(self.path, UPS_FOLDER, f'{self.name}.table')
        cp(fin, fout)
        logging.info(f'Copied {fout}')

        # TODO: this file might need to be generated
        fin = os.path.join(self.assets_folder, '_scons.cfg')
        fout = os.path.join(self.path, UPS_FOLDER, f'{self.name}.cfg')
        cp(fin, fout)
        logging.info(f'Copied {fout}')

    def discover(self, args, unknown_args):
        """
        Does a dry run to discover the package configurations.
        """

        logging.info(f'Executing setup command `discover` for package `{self.name}`.')

        self.get_versions(args, unknown_args)
        self.get_excludes()
        self.find_notebooks()
        self.find_entrypoints()

    def configure(self, args, unknown_args):
        """
        Generates the setup configuration files for the package.
        """

        logging.info(f'Executing setup command `configure` for package `{self.name}`.')

        tag, next_version, build = self.get_versions(args, unknown_args)
        self.generate_config(next_version, build)

    def clean(self, args, unknown_args):
        """
        Remove all files generated by the build process (but not the configuration)
        """

        logging.info(f'Executing setup command `clean` for package {self.name}.')

        pkgs_folder = get_arg(args, ARG_PACKAGE_FOLDER, [get_env(ENV_CONDA_PKGS_DIRS), CONDA_PACKAGE_FOLDER])
        output_folder = get_arg(args, ARG_OUTPUT_FOLDER, BUILD_OUTPUT_FOLDER.format(name=self.name))

        chdir(self.path)

        rmdir('./.eggs')
        rmdir(f'./python/{self.name.replace("-", "_")}.egg-info')
        rmdir('./build')
        rmdir('./dist')

        popdir()

        # rmdir(pkgs_folder)
        # rmdir(output_folder)

    def python_build(self, args, unknown_args):
        """
        Build the packages by calling `setup.py` directly.
        """

        logging.info(f'Executing setup command `python setup.py build` for package {self.name}.')

        chdir(self.path)

        cmd = f'python setup.py build -v' + ' '.join(unknown_args)
        run(cmd)

        popdir()

    def conda_build(self, args, unknown_args):
        """
        Build the packages using `conda-build`.
        """


        logging.info(f'Executing setup command `conda-build` for package {self.name}.')

        package_folder = get_arg(args, ARG_PACKAGE_FOLDER, [self.package_folder, get_env(ENV_CONDA_PKGS_DIRS)])
        output_folder = get_arg(args, ARG_OUTPUT_FOLDER, self.output_folder)

        mkdir(package_folder)
        mkdir(output_folder)

        chdir(self.path)

        env = os.environ.copy()
        env[ENV_CONDA_PKGS_DIRS] = package_folder

        args = ' '.join(unknown_args)
        cmd = f'conda build --output-folder {output_folder} {args} {CONDA_RECIPE_FOLDER}'
        run(cmd, env=env)

        popdir()

    def scons_build(self, args, unknown_args):
        """
        Build the packages using SConscript.
        """

        logging.info(f'Executing setup command `scons` for package {self.name}.')

        chdir(self.path)

        cmd = f'scons' + ' '.join(unknown_args)
        run(cmd)

        popdir()

    def eups_create(self, args, unknown_args):
        """
        Creates an EUPS package.
        """

        # eups distrib create -v -s build/eups -d tarball -j pfsspec_core v0.1.1
        raise NotImplementedError()

    def python_install(self, args, unknown_args):
        """
        Installs the package using `python setup.py install`.
        """

        logging.info(f'Executing setup command `python setup.py install` for package {self.name}.')

        chdir(self.path)

        cmd = f'python setup.py install -v' + ' '.join(unknown_args)
        run(cmd)

        popdir()

    def conda_install(self, args, unknown_args):
        """
        Installs the packages using `conda install`, from the locally built files.
        """

        logging.info(f'Executing setup command `conda install` for package {self.name}.')

        package_folder = get_arg(args, ARG_PACKAGE_FOLDER, [self.package_folder, get_env(ENV_CONDA_PKGS_DIRS)])
        output_folder = get_arg(args, ARG_OUTPUT_FOLDER, self.output_folder)

        chdir(self.path)

        set_env(ENV_CONDA_PKGS_DIRS, package_folder)
        cmd = f'conda install --use-local {output_folder} ' + ' '.join(unknown_args)
        run(cmd)

        popdir()

def main():
    """
    Main entry point for the script. For each package, execute the requested command.

    If no packages are specified in the command-line argument `--package`, all packages
    defined in the `MODULES` dictionary will be processed.
    """
    
    logging.basicConfig(level=logging.INFO)

    parser = create_parser()
    args, unknown_args = parser.parse_known_args()
    args = args.__dict__

    # List of packages to process, defaults to all
    modules = get_arg(args, ARG_MODULE, [ MODULES.keys() ])

    try:
        for mod in modules:
            pp = PackageBuilder(
                name=MODULE_NAME.format(name=mod),
                path=os.path.abspath(MODULE_PATH.format(name=mod)),
                url=MODULE_URL.format(name=mod),
                namespace=MODULE_NAMESPACE.format(name=mod),
                assets_folder=os.path.abspath(BUILD_ASSETS_FOLDER),
                package_folder=os.path.abspath(CONDA_PACKAGE_FOLDER),
                output_folder=os.path.abspath(BUILD_OUTPUT_FOLDER.format(name=mod)),
                source_folder=os.path.abspath(MODULE_SOURCE_FOLDER.format(name=mod)),
                command_prefix=MODULE_ENTRYPOINT_PREFIX,
                dependencies=MODULES[mod]['dependencies'],
                description=MODULES[mod]['description']
            )

            logging.info(f'Processing package `{pp.name}`.')

            if args[PARSER_COMMAND] == COMMAND_DISCOVER:
                pp.discover(args, unknown_args)
            elif args[PARSER_COMMAND] == COMMAND_CONFIGURE:
                pp.configure(args, unknown_args)
            elif args[PARSER_COMMAND] == COMMAND_CLEAN:
                pp.clean(args, unknown_args)
            elif args[PARSER_COMMAND] == COMMAND_PYTHON_BUILD:
                pp.python_build(args, unknown_args)
            elif args[PARSER_COMMAND] == COMMAND_CONDA_BUILD:
                pp.conda_build(args, unknown_args)
            elif args[PARSER_COMMAND] == COMMAND_SCONS_BUILD:
                pp.scons_build(args, unknown_args)
            elif args[PARSER_COMMAND] == COMMAND_EUPS_CREATE:
                pp.eups_create(args, unknown_args)
            elif args[PARSER_COMMAND] == COMMAND_PYTHON_INSTALL:
                raise NotImplementedError()
            elif args[PARSER_COMMAND] == COMMAND_PIP_INSTALL:
                raise NotImplementedError()
            elif args[PARSER_COMMAND] == COMMAND_CONDA_INSTALL:
                pp.conda_install(args, unknown_args)
            else:
                raise NotImplementedError()
            
    except Exception as ex:
        handle_exception(ex, continue_on_error=False)

if __name__ == "__main__":
    main()