#!/bin/env bash

# Verify if file is being sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo "The init script must be sourced!"
    exit
fi

if [[ -f "~/.bashrc" ]]; then
    echo "Sourcing .bashrc"
    source ~/.bashrc
fi

# Parse arguments

PARAMS=""
GAPIPE_ENV="default"
INIT_GIT_KEY="0"

while (( "$#" )); do
    case "$1" in
      -e|--env)
        GAPIPE_ENV="$2"
        shift 2
        ;;
      -g|--init-git)
        INIT_GIT_KEY="0"
        shift
        ;;
      --no-init-git)
        INIT_GIT_KEY="0"
        shift
        ;;
      --) # end argument parsing
        shift
        break
        ;;
      *) # preserve all other arguments
        PARAMS="$PARAMS $1"
        shift
        ;;
    esac
done

# By default, do not use the LSST stack but this can be overridden
# from the environment config file

GAPIPE_LSST="0"

# Source environment configs

if [[ -f "./configs/envs/$GAPIPE_ENV" ]]; then
    echo "Sourcing environment file $GAPIPE_ENV"
    source "./configs/envs/$GAPIPE_ENV"
else
    echo "Environment file for $GAPIPE_ENV not found. "
    exit 1
fi

# Add default modules to GAPIPE_MODULES already set in the environment config

export GAPIPE_MODULES="gapipe:${GAPIPE_ROOT}:python
gapipe-test:${GAPIPE_ROOT}:tests
${GAPIPE_MODULES}"

# Construct the PYTHONPATH from the GAPIPE_MODULES variable
# The modules are separated by spaces, and each module consists of
# a name, a path and a relative path to the python directory separated by colons.
echo "Setting up PYTHONPATH from development modules"
GAPIPE_PYTHONPATH=""
for module in $GAPIPE_MODULES; do
  mod_name=$(echo "$module" | cut -d':' -f1)
  mod_path=$(echo "$module" | cut -d':' -f2)
  mod_dir=$(echo "$module" | cut -d':' -f3)
  GAPIPE_PYTHONPATH="${GAPIPE_PYTHONPATH}:${mod_path}/${mod_dir}"
  echo "  added ${mod_name} to PYTHONPATH"
done

# Save PATH from the environment config file, because this should
# preceed the PATH set by conda environment activation.
GAPIPE_PATH="$PATH"

# Save PYTHONPATH from the environment config file, because this should
# preceed the PYTHONPATH set by conda environment activation. Conda would
# put it at the end of the PYTHONPATH, which is not what we want.
GAPIPE_PYTHONPATH="$GAPIPE_PYTHONPATH:$PYTHONPATH"
unset PYTHONPATH

# Set up environment
echo "Activating conda environment $GAPIPE_CONDAENV"
source "$GAPIPE_CONDAPATH/bin/activate" "$GAPIPE_CONDAENV"

# When working with the LSST stack, create the eups package for each
# development module.
if [[ "$GAPIPE_LSST" -eq "1" ]]; then
  if [[ -n "$GAPIPE_MODULES" ]]; then
    echo "Creating EUPS packages from development modules"
    for module in $GAPIPE_MODULES; do
      mod_name=$(echo "$module" | cut -d':' -f1)
      mod_path=$(echo "$module" | cut -d':' -f2)
      mod_python=$(echo "$module" | cut -d':' -f3)
      
      # If the module has the ups directory, create the eups package
      if [[ -d "$mod_path/ups" ]]; then
        echo "  declaring EUPS package for $mod_name, version dev"

        # If the EUPS module is already declared, undeclare it first to avoid
        # conflicts.
        eups list "${mod_name} dev" 2>/dev/null | grep . >/dev/null && {
          eups undeclare "$mod_name" dev --force >/dev/null
        }
        
        # Declare the module in EUPS
        pushd "$mod_path" >/dev/null
        eups declare "$mod_name" dev -r . --force 2>/dev/null
        popd >/dev/null
      fi
    done
  fi
fi

function sanitize_path() {
  # Remove duplicate entries from a colon-separated path string
  # Remove leading and trailing colons, and replace multiple colons with a single colon
  echo "$1" | awk -v RS=: -v ORS=: '!a[$0]++' | sed -e 's/::\+/:/g' -e 's/^://g' -e 's/:$//g'
}

# Create the new PATH and remove duplicates
export PATH=$(sanitize_path "$GAPIPE_PATH:$PATH")

# Create the new PYTHONPATH with gapipe and pfsspec paths at the front
# Also remove duplicates
export PYTHONPATH=$(sanitize_path "$GAPIPE_PYTHONPATH:$PYTHONPATH")

# Generate .env file for vscode python debugging
cat > .env <<EOF
PATH="$PATH"
PYTHONPATH="$PYTHONPATH"

DISPLAY="$DISPLAY"
CUDA_VISIBLE_DEVICES="$CUDA_VISIBLE_DEVICES"

GAPIPE_DEBUGPORT="$GAPIPE_DEBUGPORT"
GAPIPE_ROOT="$GAPIPE_ROOT"
GAPIPE_WORKDIR="$GAPIPE_WORKDIR"
GAPIPE_OUTDIR="$GAPIPE_OUTDIR"
GAPIPE_DATADIR="$GAPIPE_DATADIR"
GAPIPE_RERUNDIR="$GAPIPE_RERUNDIR"
GAPIPE_RERUN="$GAPIPE_RERUN"

PFSSPEC_ROOT="$PFSSPEC_ROOT"
PFSSPEC_DATA="$PFSSPEC_DATA"

PFSSPEC_PFS_DATADIR="$PFSSPEC_PFS_DATADIR"
PFSSPEC_PFS_RERUNDIR="$PFSSPEC_PFS_RERUNDIR"
PFSSPEC_PFS_RERUN="$PFSSPEC_PFS_RERUN"
PFSSPEC_PFS_DESIGNDIR="$PFSSPEC_PFS_DESIGNDIR"
PFSSPEC_PFS_CONFIGDIR="$PFSSPEC_PFS_CONFIGDIR"

BUTLER_CONFIGDIR="$BUTLER_CONFIGDIR"
BUTLER_COLLECTIONS="$BUTLER_COLLECTIONS"
EOF

# Register entrypoint functions

# Search and show information about PFS data products
function gapipe-repo() {
    `realpath ./bin/wrap` "-m pfs.ga.pipeline.scripts.repo.reposcript" "$@"
}

# Configure GA 1D pipeline tasks for a list of data products
function gapipe-configure() {
    `realpath ./bin/wrap` "-m pfs.ga.pipeline.scripts.configure.configurescript" "$@"
}

# Run the GA 1D pipeline on a single task
function gapipe-run() {
    `realpath ./bin/wrap` "-m pfs.ga.pipeline.scripts.run.runscript" "$@"
}

# Compile a GA catalog from a GA pipeline run
function gapipe-catalog() {
    `realpath ./bin/wrap` "-m pfs.ga.pipeline.scripts.catalog.catalogscript" "$@"
}